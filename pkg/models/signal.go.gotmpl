{{- /*
Accept data:
	Type: type without import path, can be slice or pointer.
	TypeImport: type import path.
	Package: package name.
*/ -}}

{{- $type := .Type }}
{{- $isSlice := hasPrefix "[]" $type }}
{{- if $isSlice }}
{{- $type = substr 2 -1 $type }}
{{- end }}
{{- $isPointer := hasPrefix "*" $type }}
{{- if $isPointer }}
{{- $type = substr 1 -1 $type }}
{{- end }}
{{- if .TypeImport }}
{{- $type = printf "pkg1.%s" $type }}
{{- end }}
{{- $valueType := $type }}
{{- if $isPointer }}
{{- $type = printf "*%s" $type }}
{{- end}}
{{- if $isSlice }}
{{- $type = printf "[]%s" $type }}
{{- end -}}

// Code generated from signal.go.gotmpl, DO NOT EDIT.

package {{.Package}}

import (
	"sync"
	"context"
{{- with .TypeImport}}

	pkg1 "{{.}}"
{{- end}}
)

// Signal that emit {{ $type }} to receivers.
type Signal struct {
	mu sync.Mutex
	m map[chan<- {{ $valueType }}]<-chan struct{}
	sideEffects []func(context.Context, {{ $type }}) error
}

// Emit send object to every receivers. error when hook function errors.
func (s *Signal) Emit(ctx context.Context, o {{ $type }}) error {
	s.mu.Lock()
    defer s.mu.Unlock()

	for _, fn := range s.sideEffects {
		err := fn(ctx, o)
		if err != nil {
			return err
		}
	}

	for c, done := range s.m {
		select {
{{- if $isPointer }}
			case c <- *o:
{{- else }}
			case c <- o:
{{- end }}
			case <- ctx.Done():
				return ctx.Err()
			case <- done:
		}
	}

	return nil
}

func (s *Signal) addReceiver(c chan<- {{ $valueType }}, done <-chan struct{}) {
	s.mu.Lock()
    defer s.mu.Unlock()

	if s.m == nil {
		s.m = make(map[chan<- {{ $valueType }}]<-chan struct{})
	}
	s.m[c] = done
}

func (s *Signal) removeReceiver(c chan<- {{ $valueType }}) {
	s.mu.Lock()
    defer s.mu.Unlock()

	delete(s.m, c)
}

// Connect a side effect function to signal.
// it will be called before send each object to channels.
func (s *Signal) Connect(fn func(context.Context, {{ $type }}) error) {
	s.mu.Lock()
    defer s.mu.Unlock()

	s.sideEffects = append(s.sideEffects, fn)
}

// Subscribe signal with a channel. 
// return channel will close when context cancelled.
// Emit will wait when channel is blocked.
func (s *Signal) Subscribe(cap int) (ret <-chan {{ $valueType }}, unsubscribe func()) {
	var c = make(chan {{ $valueType }}, cap)
	var done = make(chan struct{})
	s.addReceiver(c, done)
	return c, func() {
		close(done)
		s.removeReceiver(c)
		close(c)
	}
}


{{- block "signals" .}}{{end}}
