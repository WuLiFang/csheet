package db

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMarshalString(t *testing.T) {
	data, err := MarshalValue("value")
	assert.NoError(t, err)
	assert.Equal(t, []byte{0x2, 0x6, 0x0, 0x0, 0x0, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x0}, data)
}

func TestUnmarshalString(t *testing.T) {
	var v string
	err := UnmarshalValue([]byte{0x2, 0x6, 0x0, 0x0, 0x0, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x0}, &v)
	assert.NoError(t, err)
	assert.Equal(t, "value", v)
}

func TestMarshalInt(t *testing.T) {
	data, err := MarshalValue(1)
	assert.NoError(t, err)
	assert.Equal(t, []byte{0x10, 0x1, 0x0, 0x0, 0x0}, data)
}

func TestUnmarshalInt(t *testing.T) {
	var v int
	err := UnmarshalValue([]byte{0x10, 0x1, 0x0, 0x0, 0x0}, &v)
	assert.NoError(t, err)
	assert.Equal(t, 1, v)
}

func TestMarshalArray(t *testing.T) {
	data, err := MarshalValue([]string{"a", "b"})
	assert.NoError(t, err)
	assert.Equal(t, []byte{0x4, 0x17, 0x0, 0x0, 0x0, 0x2, 0x30, 0x0, 0x2, 0x0, 0x0, 0x0, 0x61, 0x0, 0x2, 0x31, 0x0, 0x2, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0}, data)
}

func TestUnmarshalArray(t *testing.T) {
	var v []string
	err := UnmarshalValue([]byte{0x4, 0x17, 0x0, 0x0, 0x0, 0x2, 0x30, 0x0, 0x2, 0x0, 0x0, 0x0, 0x61, 0x0, 0x2, 0x31, 0x0, 0x2, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0}, &v)
	assert.NoError(t, err)
	assert.Equal(t, []string{"a", "b"}, v)
}

func TestMarshalMap(t *testing.T) {
	data, err := MarshalValue(map[int]string{1: "a", 2: "b"})
	assert.NoError(t, err)
	assert.Equal(t, []byte{0x3, 0x17, 0x0, 0x0, 0x0, 0x2, 0x31, 0x0, 0x2, 0x0, 0x0, 0x0, 0x61, 0x0, 0x2, 0x32, 0x0, 0x2, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0}, data)
}

func TestUnmarshalMap(t *testing.T) {
	var v map[int]string
	err := UnmarshalValue([]byte{0x3, 0x17, 0x0, 0x0, 0x0, 0x2, 0x31, 0x0, 0x2, 0x0, 0x0, 0x0, 0x61, 0x0, 0x2, 0x32, 0x0, 0x2, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0}, &v)
	assert.NoError(t, err)
	assert.Equal(t, map[int]string{1: "a", 2: "b"}, v)
}
