{{- /*
Accept data:
    Name: operation name.
*/ -}}

// Code Generated from {{ templateFiles }}, DO NOT EDIT.
import { {{.Name}}, {{- if not .NoVariables }}{{.Name}}Variables{{end}} } from '@/graphql/types/{{.Name}}';
import { OperationVariables, QueryOptions, ApolloQueryResult } from 'apollo-client';
import { VueApolloQueryDefinition } from 'vue-apollo/types/options';
import { apolloClient } from "@/client"
{{- block "import" . }}{{ end }}

{{- if .NoVariables }}
type {{.Name}}Variables = never;
{{- end}}

export { {{.Name}}Variables, {{.Name}} };

{{- block "before" . }}{{ end }}

export async function query(
{{- if not .NoVariables }}
  variables: {{ .Name }}Variables,
{{- end }}
  options?: Omit<QueryOptions<{{ .Name }}Variables>, 'query' | 'variables'>
): Promise<ApolloQueryResult<{{ .Name }}>> {
  return await apolloClient.query<{{ .Name }}, {{ .Name }}Variables>({
    ...options,
    query: require('./{{ .Name }}.gql'),
{{- if not .NoVariables }}
    variables,
{{- end }}
  });
}

export function vueQuery<V>(
  o: Omit<
    VueApolloQueryDefinition<{{.Name}}, {{.Name}}Variables>,
    'query' | 'update'
  > &
    ThisType<V>
): VueApolloQueryDefinition<{{.Name}}, OperationVariables> & ThisType<V> {
  return {
    ...o,
    query: require('./{{.Name}}.gql'),
{{- block "options" . }}{{ end }}
  } as VueApolloQueryDefinition<{{.Name}}, OperationVariables>;
}

{{- block "after" . }}{{ end }}
