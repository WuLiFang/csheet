{{- /*
Accept data:
    Name: operation name.
*/ -}}

// Code Generated from {{ templateFiles }}, DO NOT EDIT.
/* eslint-disable import/no-duplicates */
import { {{.Name}}, {{- if not .NoVariables }}{{.Name}}Variables{{end}} } from '@/graphql/types/{{.Name}}';
import { OperationVariables, QueryOptions, WatchQueryOptions, ApolloQueryResult, ObservableQuery } from 'apollo-client';
import { VueApolloQueryDefinition } from 'vue-apollo/types/options';
import { apolloClient } from "@/client"
import { ref, Ref, watch, onUnmounted } from '@vue/composition-api';
{{- block "import" . }}{{ end }}

{{- if .NoVariables }}
type {{.Name}}Variables = never;
{{- end}}

export { {{.Name}}Variables, {{.Name}} };

{{- block "before" . }}{{ end }}

export async function query(
{{- if not .NoVariables }}
  variables: {{ .Name }}Variables,
{{- end }}
  options?: Omit<QueryOptions<{{ .Name }}Variables>, 'query' | 'variables'>
): Promise<ApolloQueryResult<{{ .Name }}>> {
  return await apolloClient.query<{{ .Name }}, {{ .Name }}Variables>({
    ...options,
    query: require('./{{ .Name }}.gql'),
{{- if not .NoVariables }}
    variables,
{{- end }}
  });
}

export function vueQuery<V>(
  o: Omit<
    VueApolloQueryDefinition<{{.Name}}, {{.Name}}Variables>,
    'query' | 'update'
  > &
    ThisType<V>
): VueApolloQueryDefinition<{{.Name}}, OperationVariables> & ThisType<V> {
  return {
    ...o,
    query: require('./{{.Name}}.gql'),
{{- block "options" . }}{{ end }}
  } as VueApolloQueryDefinition<{{.Name}}, OperationVariables>;
}

export function useQuery(
{{- if not .NoVariables }}
  variables: Ref<{{ .Name }}Variables>,
{{- end }}
  options?: Ref<
    Omit<WatchQueryOptions<{{ .Name }}Variables>, 'query' | 'variables'>
  >
): {
  data: Ref<{{ .Name }} | undefined>;
  query: ObservableQuery<{{ .Name }}, {{ .Name }}Variables>;
  {{- block "extendUseQueryType" . }}{{ end }}
} {
  const data = ref<{{ .Name }} | undefined>();
  const o = {
    query: require('./{{ .Name }}.gql'),
  }
  const q = apolloClient.watchQuery<{{ .Name }}, {{ .Name }}Variables>({
    ...options?.value,
    ...o,
{{- if not .NoVariables }}
    variables: variables.value,
{{- end }}
  });
{{- if not .NoVariables }}
  watch(
    () => variables.value,
    async n => {
      await q.setVariables(n);
    }
  );
{{- end }}
  watch(
    () => options?.value,
    n => {
      q.setOptions({ ...n, ...o });
    }
  );
  const sub = q.subscribe(value => {
    data.value = value.data;
  });
  onUnmounted(() => {
    sub.unsubscribe()
  })
  const query = q
  return {
    data,
    query,
    {{- block "extendUseQuery" . }}{{ end }}
  };
}
{{- block "after" . }}{{ end }}
